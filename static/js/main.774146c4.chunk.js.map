{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","reportWebVitals.js","index.js"],"names":["ContactForm","state","name","number","nameInputId","nanoid","numberInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","console","log","props","onSubmit","reset","this","htmlFor","id","type","onChange","pattern","title","required","Component","Filter","ContactList","contacts","onDeleteContact","length","map","className","onClick","App","filter","addContact","addedContact","find","contact","toLowerCase","alert","changeFilter","deleteContact","contactId","prevState","normalizedFilter","visibleContacts","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.774146c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = nanoid(4);\n  numberInputId = nanoid(4);\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    console.log(this.state);\n\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label htmlFor={this.nameInputId}>\n          Name\n          <input\n            id={this.nameInputId}\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label htmlFor={this.numberInputId}>\n          Number\n          <input\n            id={this.numberInputId}\n            type=\"tel\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button>Add contact</button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label>\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ContactList.scss';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return contacts.length === 0 ? (\n    <p>The phonebook is empty</p>\n  ) : (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li className=\"item\" key={id}>\n          {name}: {number}\n          <button\n            className=\"button\"\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import React, { Component, Fragment } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport 'normalize.css';\r\nimport './App.css';\r\nimport ContactForm from './components/ContactForm';\r\nimport Filter from './components/Filter';\r\nimport ContactList from './components/ContactList';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [\r\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n    ],\r\n    filter: '',\r\n  };\r\n\r\n  addContact = ({ name, number }) => {\r\n    const addedContact = {\r\n      id: nanoid(4),\r\n      name,\r\n      number,\r\n    };\r\n\r\n    this.state.contacts.find(\r\n      contact => addedContact.name.toLowerCase() === contact.name.toLowerCase(),\r\n    )\r\n      ? alert(`${addedContact.name} is already in contacts`)\r\n      : this.setState(({ contacts }) => ({\r\n          contacts: [addedContact, ...contacts],\r\n        }));\r\n  };\r\n\r\n  changeFilter = e => {\r\n    this.setState({ filter: e.currentTarget.value });\r\n  };\r\n\r\n  deleteContact = contactId => {\r\n    this.setState(prevState => ({\r\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const normalizedFilter = this.state.filter.toLowerCase();\r\n\r\n    const visibleContacts = this.state.contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n\r\n    return (\r\n      <Fragment>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm onSubmit={this.addContact} />\r\n        <h2>Contacts</h2>\r\n        <Filter value={this.state.filter} onChange={this.changeFilter} />\r\n        <ContactList\r\n          contacts={visibleContacts}\r\n          onDeleteContact={this.deleteContact}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}